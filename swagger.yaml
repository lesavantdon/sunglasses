openapi: 3.0.0
info:
  version: 1.0.0
  title: Sunglasses Store API
  description: API documentation for the Sunglasses Store application
servers:
  - url: http://localhost:3000
paths:
  /search:
    get:
      summary: Search for glasses
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: Search query
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    categoryId:
                      type: string
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "401":
          description: Invalid credentials

  /products/{brand}:
    get:
      summary: Get products by brand
      parameters:
        - in: path
          name: brand
          required: true
          schema:
            type: string
          description: Brand name
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    categoryId:
                      type: string
        "404":
          description: Brand not found

  /brands:
    get:
      summary: Get all brands
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string

  /cart:
    delete:
      summary: Remove a product from the cart
      description: Delete a product from the user's cart.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: JWT token
        - in: query
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to delete
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product removed from cart
        "400":
          description: Invalid product ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid product ID
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access
        "404":
          description: Product not found in cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found in cart
    patch:
      summary: Change the quantity of a product in the cart
      description: Update the quantity of a product in the user's cart.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product to update
                quantity:
                  type: integer
                  description: New quantity of the product
                  example: 2
      responses:
        "200":
          description: Quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quantity updated
        "400":
          description: Invalid product ID or quantity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid product ID or quantity
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized access
        "404":
          description: Product not found in cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found in cart
    get:
      summary: Get user's cart
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: string
                        quantity:
                          type: integer
        "401":
          description: Unauthorized

    post:
      summary: Add product to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: string
                        quantity:
                          type: integer
        "401":
          description: Unauthorized
        "404":
          description: Product not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
